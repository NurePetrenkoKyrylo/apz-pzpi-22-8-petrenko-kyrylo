         Міністерство освіти і науки України Харківський національний університет радіоелектроніки


Кафедра «Програмної Інженерії»





ЗВІТ
з практичного завдання № 1
з дисципліни «Архітектура програмного забезпечення»















Виконав:
ст. гр. ПЗПІ-22-8
Петренко К. С.
        Перевірив: Ст. викладач каф. ПІ
Сокорчук І. П.













Харків 2025

1. ІСТОРІЯ ЗМІН

У цьому розділі наведено історію змін, котру можна подивитись у табл. 1

Таблиця 1 – Історія змін
№
Дата
Версія звіту
Опис змін та виправлень
1
10.04.2025
0.1
Створено розділ «Завдання»
2
10.04.2025
0.1
Створено розділ «Опис виконаної роботи»
3
10.04.2025
0.1
Створено розділ «Висновки»
4
11.04.2025
0.2
Додано слайди презентації до додатку Б
5
11.04.2025
0.2
Додано програмний код до Додатку В
6
11.04.2025
0.2
Додано посилання на відеозапис та його хронологічний опис до додатку А


2. ЗАВДАННЯ
У межах першої практичної роботи з дисципліни «Архітектура програмного забезпечення» необхідно було дослідити патерн проєктування Prototype (Прототип). Основна мета — зрозуміти механізм створення нових об’єктів шляхом копіювання вже існуючих, без прив’язки до конкретних класів. Завдання передбачало вивчення принципів роботи патерну, аналіз ситуацій його застосування, а також практичну реалізацію прикладу.

3. ОПИС ВИКОНАНОЇ РОБОТИ
У процесі виконання роботи було проаналізовано патерн проєктування Prototype, який належить до категорії створюючих патернів.

3.1 Суть патерну Prototype
Патерн "Прототип" дозволяє створювати копії об’єктів, використовуючи вже наявний екземпляр як шаблон. Замість створення нового об’єкта через конструктор, копія створюється шляхом виклику методу clone(). Це особливо корисно, коли процес ініціалізації є дорогим або складним.

3.2  Ключові елементи
Ключовими елементами патерну є:
* Prototype (Інтерфейс) — оголошує метод clone(), який мають реалізувати конкретні класи.
* ConcretePrototype — клас, що реалізує інтерфейс і містить логіку копіювання своїх даних.
* Client — створює копії об’єктів через інтерфейс Prototype, не знаючи їх точного типу.


   3.3 Принцип роботи
Патерн передбачає наявність базового інтерфейсу з методом clone(), який реалізується кожним класом-прототипом. Клієнт взаємодіє лише з цим інтерфейсом, копіюючи об’єкти без використання операторів new. Такий підхід дозволяє динамічно створювати нові екземпляри з уже існуючих зразків.

3.4  Сфера застосування
Prototype доцільно використовувати, коли:
* Потрібно уникнути створення об’єктів через конструктори.
* Необхідно створювати копії складних об’єктів.
* Система має обмежений набір конфігурованих об’єктів, які можна копіювати.

   3.5 Переваги та недоліки
Переваги:
* Зниження витрат на створення нових об’єктів.
* Можливість клонування об’єктів без знання їхніх класів.
* Гнучкість та розширюваність системи.

Недоліки:
* Потрібно реалізовувати клонування вручну у кожному класі.
* Глибоке копіювання може бути складним.
* Потенційні помилки при клонуванні складних об’єктів зі зв’язками.

   3.6 Приклади використання
У Java патерн реалізується через інтерфейс Cloneable та метод clone(). Часто використовується в графічних редакторах (копіювання фігур), генераторах документів або при створенні складних об'єктів конфігурації.

3.7 Реалізація на Java
В межах практики було створено приклад на Java, де реалізовано базовий інтерфейс Product, який має метод clone(). Конкретні класи, такі як Book та Movie, реалізують цей інтерфейс. Клієнт створює шаблони об’єктів та клонує їх при необхідності.
Цей підхід дозволяє створювати нові об’єкти без повторного заповнення даних вручну, демонструючи ефективність і простоту використання патерну в реальних додатках.


4. ВИСНОВКИ
У результаті виконання практичної роботи було досліджено патерн проєктування Prototype як один із способів створення нових об’єктів шляхом копіювання існуючих. Було з’ясовано, що цей підхід дозволяє зменшити залежність від конкретних класів і спрощує процес створення складних об’єктів, особливо коли їх ініціалізація є ресурсоємною або повторюваною.











ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/VGHB2A9qyEs

00:00 Вступ 
00:10 Що таке "Прототип" 
00:20 Проблеми, які вирішує патерн 
01:34 Ідея патерна 
03:07 Коли використовувати "Прототип" 
04:29 Структура патерна "Прототип" 
05:06 Приклад застосування патерну "Прототип" 
05:33 Переваги використання патерну "Прототип" 
05:49 Недоліки використання патерну "Прототип" 
06:02 Висновки 
06:30 Використані джерела
































ДОДАТОК Б

Рисунок Б.1 - Титульний слайд презентації

 Рисунок Б.2 - Визначення патерну «Прототип»

 Рисунок Б.3 - Визначення патерну «Прототип»

Рисунок Б.4 – Ідея патерна «Прототип»


 Рисунок Б.5 – Коли використовувати «Прототип»
 

 Рисунок Б.6 – Структура патерна «Прототип»
 Рисунок Б.7 – Приклад застосування патерна «Прототип»




Рисунок Б.8 – Переваги патерна «Прототип»


Рисунок Б.9 – Недоліки патерна «Прототип»



Рисунок Б.10 - Висновки


Рисунок Б.11 – Список використаних джерел



Рисунок Б.12 – Заключний слайд








ДОДАТОК В
Програмний код

1. // Інтерфейс Prototype визначає метод клонування
 2. interface Prototype {
 3.     Prototype clone();
 4. }
 5. 
 6. // Клас Medicine реалізує Prototype
 7. class Medicine implements Prototype {
 8.     private String name;
 9.     private String manufacturer;
10.     private double price;
11. 
12.     public Medicine(String name, String manufacturer, double price) {
13.         this.name = name;
14.         this.manufacturer = manufacturer;
15.         this.price = price;
16.     }
17. 
18.     // Метод клонування створює нову копію об'єкта
19.     @Override
20.     public Prototype clone() {
21.         return new Medicine(this.name, this.manufacturer, this.price);
22.     }
23. 
24.     // Метод для зміни ціни
25.     public void setPrice(double newPrice) {
26.         this.price = newPrice;
27.     }
28. 
29.     // Виведення інформації про ліки
30.     public void display() {
31.         System.out.println("Назва: " + name +
32.                            ", Виробник: " + manufacturer +
33.                            ", Ціна: " + price + " грн");
34.     }
35. }
36. 
37. // Головний клас демонструє використання патерна
38. public class Main {
39.     public static void main(String[] args) {
40.         // Створення оригінального об'єкта
41.         Medicine original = new Medicine("Парацетамол", "HealthCorp", 37.5);
42. 
43.         // Клонування об'єкта
44.         Medicine copy = (Medicine) original.clone();
45. 
46.         // Зміна ціни в копії, щоб показати незалежність об'єктів
47.         copy.setPrice(42.0);
48. 
49.         // Виведення обох об'єктів
50.         System.out.println("=== Оригінал ===");
51.         original.display();
52. 
53.         System.out.println("=== Копія ===");
54.         copy.display();
55.     }
56. }
