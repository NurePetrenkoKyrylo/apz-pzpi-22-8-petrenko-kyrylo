Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії






Звіт
З лабораторної роботи №3
з дисципліни «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури, створення та відлагодження програмного коду вебклієнта програмної системи»





Виконав: 
Ст. гр. ПЗПІ-22-8
Петренко К. С.
Перевірив: 
ст. викладач катедри ПІ
Сокорчук Ігор Петрович





Харків 2025

1. ІСТОРІЯ ЗМІН
№
Дата
Версія звіту
Опис змін та виправлень
1
05.06.2025 
0.1
Створено розділ «Завдання»
2
05.06.2025
0.1
Створено розділ «Опис виконаної роботи»
3
05.06.2025
0.1
Створено розділ «Висновки»
4
05.06.2025
0.2
Створено Додаток А
5
05.06.2025
0.2
Створено Додаток Б
6
05.06.2025
0.2
Створено Додаток В
7
05.06.2025
0.2
Створено Додаток Г

2. ЗАВДАННЯ
     ТЕМА: розробка програмної архітектури, створення та відлагодження програмного коду вебклієнта програмної системи
     МЕТА: розробка ефективної та масштабованої архітектури вебклієнта програмної системи, реалізація функціонального інтерфейсу користувача, а також тестування і налагодження програмного коду для забезпечення стабільної та зручної роботи клієнтської частини системи

3. ОПИС ВИКОНАНОЇ РОБОТИ
     У межах третьої лабораторної роботи було розроблено вебзастосунок для автоматизації роботи аптечних установ, що забезпечує керування запасами ліків, моніторинг умов зберігання, перегляд транзакцій, формування звітів і керування користувачами. Основна мета — створення функціональної, адаптивної, захищеної системи для фармацевтів та адміністративного персоналу з можливістю аналітичного контролю над всіма операціями.
     
1. Вибір технологій
Проєкт реалізовано з використанням сучасного стеку технологій:
- мова розмітки/стилізації: HTML5 + Tailwind CSS;
- фронтенд: React + TypeScript;
- управління станом/маршрутизація: React Router v6;
- http-запити до API: Axios;
- інтерфейс збереження автентифікації: localStorage (JWT);
- розробницьке середовище: Visual Studio Code;
- менеджер пакетів: npm;
- інструменти стилізації: Tailwind CSS, PostCSS.

2. Структура проєкту та компоненти
У застосунку реалізовано такі основні компоненти:
- loginPage — сторінка авторизації;
- dashboard — головна панель користувача після входу;
- pharmacies — управління аптеками;
- users — керування співробітниками та ролями;
- IoTDevices — моніторинг IoT-пристроїв (температура, вологість);
- transactions — перегляд усіх операцій видачі та обліку ліків;
- reports — генерація статистичних та операційних звітів;
- login — логіка автентифікації та отримання токена.
Уся навігація реалізована з використанням React Router, з обмеженням 
доступу до окремих маршрутів через захист PrivateRoute, який перевіряє наявність accessToken у localStorage

3. Авторизація та безпека
Після успішної авторизації через форму LoginPage, користувач отримує 
JWT-токен, який зберігається у localStorage і використовується для авторизованих запитів до сервера. Усі захищені маршрути доступні лише після входу.

4. Інтерфейс для фармацевтів та аптечного персоналу
Реалізовано окрему рольову систему, яка забезпечує функціонал для 
фармацевтів:
- авторизований доступ до системи;
- моніторинг запасів препаратів із зазначенням кількості, місця зберігання;
- моніторинг умов зберігання — відображення температури та вологості в реальному часі з підключених IoT-пристроїв;
- перегляд транзакцій — детальна історія операцій видачі/повернення ліків;
- багатомовність інтерфейсу — можливість вибору мови залежно від регіону користувача

5. Інтерфейс адміністратора
Для користувачів з адміністративними правами реалізовано наступні 
функції:
- керування аптеками — додавання/редагування аптек і складів;
- управління користувачами — створення облікових записів фармацевтів та адміністраторів, налаштування ролей;
- управління запасами — перегляд критичних залишків, встановлення порогів поповнення, ручне та автоматичне оновлення складу;
- налаштування умов зберігання — сповіщення про порушення температурного або вологісного режиму.

6. IoT-моніторинг
Було реалізовано окремий компонент IoTDevices, який підключений до 
бекенд-сервісу, що опрацьовує сигнали з пристроїв, розташованих у місцях зберігання ліків. Інтерфейс відображає:
- поточну температуру та вологість;
- графік змін параметрів;
- сигнали тривоги при виході за допустимі межі

7. Модуль звітності та аналітики
Компонент Reports забезпечує:
- генерацію статистичних звітів за період;
- перегляд динаміки споживання препаратів;
- автоматичне формування звітів для керівництва;
- виведення CSV або PDF-файлів зі зведеною інформацією;
- прогнозування попиту на основі історичних даних (наприклад, аналіз продажів за квартал)

8. Стилізація та адаптивність
Для стилізації застосовувався Tailwind CSS. Усі компоненти мають 
адаптивну верстку та підтримують роботу на різних пристроях (ПК, планшети, смартфони). Оформлення витримано в єдиному стилі з акцентом на зручність і швидкість взаємодії.

4. ВИСНОВКИ
     У результаті виконаної роботи було створено функціональний, багатокомпонентний вебзастосунок для аптечної мережі з підтримкою IoT, аналітики, керування персоналом та складу. Реалізація розділення прав доступу, багатомовного інтерфейсу та захищених маршрутів робить систему придатною для використання як у локальному середовищі, так і в масштабованому хмарному рішенні.
     




ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/SIS6LI8wubY

Хронологічний опис відеозапису:

0:00 - Вступ 
0:15 - Тестування авторизації 
0:35 - Тестування перекладу інтерфейсу 
0:58 - Тестування дій з медикаментами 
2:11 - Тестування дій з інвентарем аптек 
3:03 - Тестування перегляду низьких запасів 
3:28 - Тестування рекомендацій поповнення 
3:47 - Перегляд статистики інвентаря 
3:59 - Історія видач препаратів 
4:30 - Формування звітів 
5:17 - Тестування дій з IoT пристроями 
5:50 - Тестування дій з аптеками 
7:04 - Перегляд користувачів

ДОДАТОК Б
Графічні матеріали


Рисунок Б.1 – UML діаграма прецедентів


Рисунок Б.2 – UML діаграма компонент


 

Рисунок Б.3 – UML діаграма взаємодії


Рисунок Б.4 – UML діаграма діяльності






ДОДАТОК В
Код компонента LoginPage.tsx
1  import React, { useState } from "react";
2  import axios from "axios";
3  import { useNavigate } from "react-router-dom";
4  
5  const LoginPage: React.FC = () => {
6    const [email, setEmail] = useState("");
7    const [password, setPassword] = useState("");
8    const [error, setError] = useState("");
9    const navigate = useNavigate();
10 
11   const handleLogin = async (e: React.FormEvent) => {
12     e.preventDefault();
13     try {
14       const response = await axios.post("http://localhost:5000/api/login", {
15         email,
16         password,
17       });
18 
19       const { accessToken } = response.data;
20 
21       // Зберігаємо токен у локальному сховищі
22       localStorage.setItem("accessToken", accessToken);
23 
24       // Перенаправлення на дашборд
25       navigate("/dashboard");
26     } catch (err: any) {
27       setError("Невірний логін або пароль");
28     }
29   };
30 
31   return (
32     <div className="flex justify-center items-center h-screen bg-gray-100">
33       <form
34         onSubmit={handleLogin}
35         className="bg-white p-6 rounded-lg shadow-md w-96"
36       >
37         <h2 className="text-2xl font-bold mb-4 text-center">Вхід</h2>
38 
39         {error && <p className="text-red-500 mb-2">{error}</p>}
40 
41         <input
42           type="email"
43           placeholder="Email"
44           value={email}
45           onChange={(e) => setEmail(e.target.value)}
46           required
47           className="w-full p-2 border rounded mb-4"
48         />
49         <input
50           type="password"
51           placeholder="Пароль"
52           value={password}
53           onChange={(e) => setPassword(e.target.value)}
54           required
55           className="w-full p-2 border rounded mb-4"
56         />
57 
58         <button
59           type="submit"
60           className="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600"
61         >
62           Увійти
63         </button>
64       </form>
65     </div>
66   );
67 };
68 
69 export default LoginPage;

ДОДАТОК Г
Приклад REST API

1 router.get('/pharmacies/', adminOnly, AdminController.getAllPharmacies);
2 router.post('/pharmacies/', adminOnly, AdminController.addPharmacy);
3 router.patch('/pharmacies/:pharmacyId/', adminOnly, AdminController.updatePharmacy);
4 router.delete('/pharmacies/:pharmacyId/', adminOnly, AdminController.deletePharmacy);
5 
6 async getAllPharmacies(req, res) {
7         try {
8             const pharmacies = await Pharmacy.find().populate('manager');
9             res.status(200).json(pharmacies);
10         } catch (error) {
11             res.status(500).json({message: 'Помилка при отриманні списку аптек', error});
12         }
13     }
14 
15     async addPharmacy(req, res) {
16         try {
17             const {name, address, workingHours, managerId, maxStorageSize, bonusPercent} = req.body;
18             const newPharmacy = new Pharmacy({
19                 name,
20                 address,
21                 workingHours,
22                 manager: managerId,
23                 maxStorageSize,
24                 bonusPercent,
25             });
26             await newPharmacy.save();
27             res.status(201).json({message: 'Аптеку додано успішно', pharmacy: newPharmacy});
28         } catch (error) {
29             res.status(500).json({message: 'Помилка при додаванні аптеки', error});
30         }
31     }
32 
33     async updatePharmacy(req, res) {
34         try {
35             const {pharmacyId} = req.params;
36             const updatedPharmacy = await Pharmacy.findByIdAndUpdate(pharmacyId, req.body, {new: true});
37             if (!updatedPharmacy) return res.status(404).json({message: 'Аптеку не знайдено'});
38             res.status(200).json({message: 'Аптеку оновлено успішно', pharmacy: updatedPharmacy});
39         } catch (error) {
40             res.status(500).json({message: 'Помилка при оновленні аптеки', error});
41         }
42     }
43 
44     async deletePharmacy(req, res) {
45         try {
46             const {pharmacyId} = req.params;
47             await Pharmacy.findByIdAndDelete(pharmacyId);
48             res.status(200).json({message: 'Аптеку видалено успішно'});
49         } catch (error) {
50             res.status(500).json({message: 'Помилка при видаленні аптеки', error});
51         }
52   }

