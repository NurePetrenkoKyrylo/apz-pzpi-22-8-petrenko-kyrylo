Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії






Звіт
З лабораторної роботи №5
з дисципліни «Архітектура програмного забезпечення»
на тему: «Розгортання програмної системи та демонстрація її роботи»





Виконав: 
Ст. гр. ПЗПІ-22-8
Петренко К. С.Перевірив: 
ст. викладач катедри ПІ
Сокорчук Ігор Петрович





Харків 2025

1. ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень106.06.2025 0.1Створено розділ «Завдання»206.06.20250.1Створено розділ «Опис виконаної роботи»306.06.20250.1Створено розділ «Висновки»406.06.20250.2Створено Додаток А506.06.20250.2Створено Додаток Б606.06.20250.2Створено Додаток В706.06.20250.2Створено Додаток Г806.06.20250.2Створено Додаток Д906.06.20250.2Створено Додаток Е1006.06.20250.2Створено Додаток Ж
2. ЗАВДАННЯ
     ТЕМА: розгортання програмної системи та демонстрація її роботи
     МЕТА: розгорнути та продемонструвати повноцінну програмну систему, що включає серверну частину, клієнтську мобільну частину та веб-додаток.

3. ОПИС ВИКОНАНОЇ РОБОТИ
У ході виконання цього проєкту було розроблено серверну частину, веб-
клієнт та мобільний додаток для автоматизації роботи фармацевтичної системи.
1) Серверна частина
Було розроблено відповідну до функціональних потреб та предметної 
галузі програмного продукту базу даних з використанням СУБД MongoDB. Схему бази даних наведено в додатку Б. База даних зберігається на хмарному провайдері AWS та за допомогою Mongo Atlas. Для взаємодії з базою даних використовується Mongoose Object Data Modelling та вбудовані методи взаємодії з базою даних Mongo. Приклад використання наведено у додатку А.
     Було розроблено REST API для взаємодії серверної частини з клієнтами. API складається з 3 маршрутів, відповідно до частин системи, з якими взаємодіє клієнт.
     
     
     
     Таблиця 1 – REST API програмної системи.
HTTP МетодЕндпоінтДозволені РоліОписМаршрути КористувачівGET/user/автентифікованийОтримати профіль користувачаPOST/user/reg/неавтентифікованийЗареєструвати нового користувачаPOST/user/login/неавтентифікованийАвторизація користувачаPOST/user/purchase/admin, pharmacistЗареєструвати покупку у системіМаршрути ІнвентаризаціїGET/inventory/medications/admin, pharmacistОтримати список усіх медикаментів з можливістю обрання конкретної аптекиPOST/inventory/medications/admin, pharmacistДодати медикамент в інвентар конкретної аптекиPUT/inventory/medications/quantity/admin, pharmacistОновити кількість медикаментів в інвентаріGET/inventory/medications/low-inventory/admin, pharmacistОтримати медикаменти з низьким рівнем запасівGET/inventory/storage-conditions/:pharmacyId/admin, pharmacistПеревірити умови зберігання в аптеці за pharmacyId, використовуючи дані сенсорів IoTGET/inventory/medications/restock-recommendations/adminЗгенерувати рекомендації щодо поповнення запасів  якщо їх кількість нижча за певний поріг або в них майже закінчився срок придатностіGET/inventory/statistics/adminОтримати статистику щодо запасів, включаючи загальну кількість
медикаментів, середню ціну для кожного медикаменту та кількість проданих у середньому за місяцьGET/inventory/transactions/:pharmacyId/admin, pharmacistОтримати історію виданих препаратів за вказаний час та за pharmacyIdGET/inventory/reports/salesadminСтворити звіт по продажам медикаментівGET/inventory/snapshotadminСтворити звіт по інвентарю аптекPOST/inventory/medications/write-offadmin, pharmacistСписати медикаменти з інвентаря аптекиМаршрути АдміністратораGET/admin/iot-devices/adminОтримати список усіх IoT-пристроївPOST/admin/iot-devices/adminДодати новий IoT-пристрійPATCH/admin/iot-devices/:deviceId/adminОновити IoT-пристрій за deviceIdDELETE/admin/iot-devices/:deviceId/adminВидалити IoT-пристрій за deviceIdGET/admin/pharmacies/adminОтримати список усіх аптекPOST/admin/pharmacies/adminДодати нову аптекуPATCH/admin/pharmacies/:pharmacyId/adminОновити аптеку за pharmacyIdDELETE/admin/pharmacies/:pharmacyId/adminВидалити аптеку за pharmacyIdGET/admin/users/adminОтримати список усіх користувачівPOST/admin/users/adminДодати нового користувачаPATCH/admin/users/:userId/adminОновити дані користувача за userIdDELETE/admin/users/:userId/adminВидалити дані користувача за userIdPOST/admin/medications/adminДодати новий медикаментGET/admin/medications/adminОтримати список усіх медикаментівPATCH/admin/medications/:medicationId/adminОновити медикамент за medicationIdDELETE/admin/medications/:medicationId/adminВидалити медикамент за medicationIdPOST/admin/iot-devices/:deviceId/report/adminОтримати дані від IoT-пристрою      
     Було створено серверну частину проекту відповідно до REST API. Сервер працює на мові програмування JavaScript та використанням фреймворку ExpressJS. Також було використано бібліотеку bcryptjs для шифрування паролю користувача та jsonwebtoken для створення токенів для ідентифікації дій користувачів. Приклад використання маршрутизації Express наведено у додатку Б.
     Бізнес-логіка серверної частини системи для автоматизації процесів аптеки реалізує наступні завдання:
     Систему моніторингу та додавання нових пристроїв IoT для контролю умов зберігання ліків (температура, вологість) з можливістю створення та управління новими IoT пристроями.
     Автоматизовану систему управління інвентарем та запасами медикаментів з можливістю оновлення даних про наявність ліків та точного обліку з урахуванням локального часу.
     Автоматизовану систему для відображення найбільш пріоритетних завдань щодо поповнення запасів і рекомендацій щодо замовлення на основі історії використання та поточних залишків.
     Статистичний аналіз та формування звітів по споживанню та продажу лікарських засобів, який допоможе адміністрації приймати рішення щодо поповнення, розширення складу або оптимізації процесів.
     
2) Веб-клієнт
Було розроблено вебзастосунок для автоматизації роботи аптечних 
установ, що забезпечує керування запасами ліків, моніторинг умов зберігання, перегляд транзакцій, формування звітів і керування користувачами. Основна мета — створення функціональної, адаптивної, захищеної системи для фармацевтів та адміністративного персоналу з можливістю аналітичного контролю над всіма операціями.
Проєкт реалізовано з використанням сучасного стеку технологій:
- мова розмітки/стилізації: HTML5 + Tailwind CSS;
- фронтенд: React + TypeScript;
- управління станом/маршрутизація: React Router v6;
- http-запити до API: Axios;
- інтерфейс збереження автентифікації: localStorage (JWT);
- розробницьке середовище: Visual Studio Code;
- менеджер пакетів: npm;
- інструменти стилізації: Tailwind CSS, PostCSS.
У застосунку реалізовано такі основні компоненти:
- loginPage — сторінка авторизації;
- dashboard — головна панель користувача після входу;
- pharmacies — управління аптеками;
- users — керування співробітниками та ролями;
- IoTDevices — моніторинг IoT-пристроїв (температура, вологість);
- transactions — перегляд усіх операцій видачі та обліку ліків;
- reports — генерація статистичних та операційних звітів;
- login — логіка автентифікації та отримання токена.
Уся навігація реалізована з використанням React Router, з обмеженням 
доступу до окремих маршрутів через захист PrivateRoute, який перевіряє наявність accessToken у localStorage.

3) Мобільна частина 
     Розробка здійснювалася з використанням мови Kotlin та сучасного фреймворку Jetpack Compose для побудови інтерфейсу користувача. Архітектура програми побудована на основі шаблону MVVM (Model-View-ViewModel), що дозволяє розділити логіку представлення та бізнес-логіку, забезпечуючи масштабованість і підтримуваність проєкту.
     
1. Реалізація авторизації
На початковому етапі реалізовано форму авторизації, яка передає дані 
(email та пароль) на backend-сервер за допомогою HTTP-запиту POST. Для обміну даними використовується бібліотека Retrofit2 з конвертером Gson. Отриманий токен доступу зберігається у стані StateFlow, який спостерігається з екрану.
Було створено:
- authRepository — обробка авторизаційного запиту;
- authViewModel — керування станом авторизації;
- loginScreen — інтерфейс для введення email і пароля.

2. Виведення медикаментів після входу
Після успішного входу користувача перенаправляє на головний екран з 
переліком доступних медикаментів, отриманих з API за адресою GET /inventory/medications/. Отримані дані включають ID медикаменту, аптеку, кількість, дату виробництва, цінову інформацію, а також умови зберігання (температурний і вологісний діапазон).
Реалізовано:
- medicationItem — модель даних;
- medicationApi — API-інтерфейс;
- medicationRepository — отримання списку медикаментів;
- medicationViewModel — керування станом медикаментів;
- mainScreen + lazyColumn — виведення списку карток медикаментів.

3. Купівля медикаментів
     Кожен медикамент у списку має кнопку “Купити”, натискаючи яку, користувач надсилає дані про покупку на сервер у форматі POST /user/purchase/. Запит містить електронну пошту користувача, ID медикаменту, аптеку, кількість одиниць та прапор використання бонусів.
     Дані моделі PurchaseRequest надсилаються через UserRepository, який використовує UserApi з Retrofit. У випадку успішної покупки на екрані з’являється повідомлення про успішне замовлення.

4. Перегляд історії покупок
     Реалізовано екран “Історія покупок”, який запитує список транзакцій користувача (GET /user/purchases/). Кожен запис містить інформацію про дату, назву медикаменту, кількість, загальну вартість. Для зручності реалізовано нижнє навігаційне меню між вкладками:
- медикаменти;
- мої покупки.
Це реалізовано через BottomNavigation компонент у Jetpack Compose

5. Архітектура та інші особливості
Для користувачів з адміністративними правами реалізовано наступні 
функції:
- jetpack Compose дозволив швидко створювати декларативний UI з мінімальною кількістю XML-розмітки;
- для реактивного оновлення UI використано StateFlow та collectAsState;
- дані з backend приходять у форматі JSON, який автоматично парситься у Kotlin-класи за допомогою Gson;
- обмін даними відбувається з використанням локального Flask-серверу (localhost:5000) через Android-емулятор (адреса 10.0.2.2).

4. ВИСНОВКИ
     У ході виконання курсового проєкту було розроблено повнофункціональну програмну систему для автоматизації роботи фармацевтичного підприємства. Система включає три основні компоненти: серверну частину (бекенд), вебклієнт (інтерфейс для співробітників аптек і адміністраторів) та мобільний додаток (для швидкого доступу до функцій системи).
     




ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/QsXdBIESXqI

Хронологічний опис відеозапису:

0:00 - Вступ 
0:25 - Розгортання: серверна частина 
0:42 - Розгортання: веб частина 
1:22 - Розгортання: мобільна частина 
1:52 - Розгортання: ІoТ девайс 
3:16 - Підсумок

ДОДАТОК Б
Графічні матеріали


Рисунок Б.1 – UML діаграма прецедентів


Рисунок Б.2 – UML діаграма компонент


 

Рисунок Б.3 – ER-модель даних (Entity–Relationship Model) 


Рисунок Б.4 – UML діаграму взаємодії

     
     Рисунок Б.5 – UML діаграма діяльності
     
     
     Рисунок Б.6 – UML діаграма взаємодії


ДОДАТОК В
Приклад REST API

1 router.get('/pharmacies/', adminOnly, AdminController.getAllPharmacies);
2 router.post('/pharmacies/', adminOnly, AdminController.addPharmacy);
3 router.patch('/pharmacies/:pharmacyId/', adminOnly, AdminController.updatePharmacy);
4 router.delete('/pharmacies/:pharmacyId/', adminOnly, AdminController.deletePharmacy);
5 
6 async getAllPharmacies(req, res) {
7         try {
8             const pharmacies = await Pharmacy.find().populate('manager');
9             res.status(200).json(pharmacies);
10         } catch (error) {
11             res.status(500).json({message: 'Помилка при отриманні списку аптек', error});
12         }
13     }
14 
15     async addPharmacy(req, res) {
16         try {
17             const {name, address, workingHours, managerId, maxStorageSize, bonusPercent} = req.body;
18             const newPharmacy = new Pharmacy({
19                 name,
20                 address,
21                 workingHours,
22                 manager: managerId,
23                 maxStorageSize,
24                 bonusPercent,
25             });
26             await newPharmacy.save();
27             res.status(201).json({message: 'Аптеку додано успішно', pharmacy: newPharmacy});
28         } catch (error) {
29             res.status(500).json({message: 'Помилка при додаванні аптеки', error});
30         }
31     }
32 
33     async updatePharmacy(req, res) {
34         try {
35             const {pharmacyId} = req.params;
36             const updatedPharmacy = await Pharmacy.findByIdAndUpdate(pharmacyId, req.body, {new: true});
37             if (!updatedPharmacy) return res.status(404).json({message: 'Аптеку не знайдено'});
38             res.status(200).json({message: 'Аптеку оновлено успішно', pharmacy: updatedPharmacy});
39         } catch (error) {
40             res.status(500).json({message: 'Помилка при оновленні аптеки', error});
41         }
42     }
43 
44     async deletePharmacy(req, res) {
45         try {
46             const {pharmacyId} = req.params;
47             await Pharmacy.findByIdAndDelete(pharmacyId);
48             res.status(200).json({message: 'Аптеку видалено успішно'});
49         } catch (error) {
50             res.status(500).json({message: 'Помилка при видаленні аптеки', error});
51         }
52   }


ДОДАТОК Г
Приклад обробки даних IoT- пристрою

1 async receiveIoTData(req, res) {
2         try {
3             const {deviceId} = req.params;
4             const {temperature, humidity} = req.body;
5 
6             const device = await IoTDevice.findById(deviceId).populate('pharmacy');
7             if (!device) {
8                 return res.status(404).json({message: 'IoT пристрій не знайдено'});
9             }
10 
11             const storageConditionEntry = new StorageConditionHistory({
12                 pharmacy: device.pharmacy,
13                 iotDevice: device._id,
14                 date: new Date(),
15                 temperature,
16                 humidity
17             });
18             await storageConditionEntry.save();
19 
20             device.status = 'active';
21             await device.save();
22 
23             res.status(200).json({
24                 message: 'Дані успішно збережено',
25                 measurementInterval: device.measurementInterval,
26                 normalRange: device.normalRange
27             });
28         } catch (error) {
29             res.status(500).json({message: 'Помилка при обробці даних IoT пристрою', error: error.message});
30         }
31     }


ДОДАТОК Д
Код компонента LoginPage.tsx
1  import React, { useState } from "react";
2  import axios from "axios";
3  import { useNavigate } from "react-router-dom";
4  
5  const LoginPage: React.FC = () => {
6    const [email, setEmail] = useState("");
7    const [password, setPassword] = useState("");
8    const [error, setError] = useState("");
9    const navigate = useNavigate();
10 
11   const handleLogin = async (e: React.FormEvent) => {
12     e.preventDefault();
13     try {
14       const response = await axios.post("http://localhost:5000/api/login", {
15         email,
16         password,
17       });
18 
19       const { accessToken } = response.data;
20 
21       // Зберігаємо токен у локальному сховищі
22       localStorage.setItem("accessToken", accessToken);
23 
24       // Перенаправлення на дашборд
25       navigate("/dashboard");
26     } catch (err: any) {
27       setError("Невірний логін або пароль");
28     }
29   };
30 
31   return (
32     <div className="flex justify-center items-center h-screen bg-gray-100">
33       <form
34         onSubmit={handleLogin}
35         className="bg-white p-6 rounded-lg shadow-md w-96"
36       >
37         <h2 className="text-2xl font-bold mb-4 text-center">Вхід</h2>
38 
39         {error && <p className="text-red-500 mb-2">{error}</p>}
40 
41         <input
42           type="email"
43           placeholder="Email"
44           value={email}
45           onChange={(e) => setEmail(e.target.value)}
46           required
47           className="w-full p-2 border rounded mb-4"
48         />
49         <input
50           type="password"
51           placeholder="Пароль"
52           value={password}
53           onChange={(e) => setPassword(e.target.value)}
54           required
55           className="w-full p-2 border rounded mb-4"
56         />
57 
58         <button
59           type="submit"
60           className="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600"
61         >
62           Увійти
63         </button>
64       </form>
65     </div>
66   );
67 };
68 
69 export default LoginPage;


ДОДАТОК Е
Авторизація користувача через ViewModel
01. class AuthViewModel(private val repository: AuthRepository) : ViewModel() {
02.
03.     private val _token = MutableStateFlow<String?>(null)
04.     val token: StateFlow<String?> = _token
05.
06.     private val _error = MutableStateFlow<String?>(null)
07.     val error: StateFlow<String?> = _error
08.
09.     fun login(email: String, password: String) {
10.         viewModelScope.launch {
11.             try {
12.                 val response = repository.login(email, password)
13.                 _token.value = response.token
14.                 _error.value = null
15.             } catch (e: Exception) {
16.                 _error.value = "Login failed: ${e.message}"
17.             }
18.         }
19.     }
20. }

ДОДАТОК Ж
Виконання покупки медикаменту
01. fun purchaseMedication(
02.     email: String,
03.     medicationId: String,
04.     pharmacyId: String,
05.     quantity: Int,
06.     useBonusPoints: Boolean
07. ) {
08.     viewModelScope.launch {
09.         try {
10.             val response = userRepository.purchaseMedication(
11.                 email, medicationId, pharmacyId, quantity, useBonusPoints
12.             )
13.             _purchaseResult.value = "Success: $response"
14.         } catch (e: Exception) {
15.             _purchaseResult.value = "Purchase failed: ${e.message}"
16.         }
17.     }
18. }

