Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії






Звіт
З лабораторної роботи №4
з дисципліни «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури та створення і відлагодження програмного коду програмного застосунку мобільного пристрою для програмної системи»





Виконав: 
Ст. гр. ПЗПІ-22-8
Петренко К. С.Перевірив: 
ст. викладач катедри ПІ
Сокорчук Ігор Петрович




Харків 2025

1. ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень105.06.2025 0.1Створено розділ «Завдання»205.06.20250.1Створено розділ «Опис виконаної роботи»305.06.20250.1Створено розділ «Висновки»405.06.20250.2Створено Додаток А505.06.20250.2Створено Додаток Б605.06.20250.2Створено Додаток В705.06.20250.2Створено Додаток Г
2. ЗАВДАННЯ
     ТЕМА: розробка програмної архітектури та створення і відлагодження програмного коду програмного застосунку мобільного пристрою для програмної системи
     МЕТА: розробка ефективної та масштабованої архітектури мобільного клієнта програмної системи, реалізація функціонального інтерфейсу користувача, а також тестування і налагодження програмного коду для забезпечення стабільної та зручної роботи мобільної частини системи

3. ОПИС ВИКОНАНОЇ РОБОТИ
У ході виконання курсового проєкту було розроблено мобільний додаток 
для автоматизації роботи фармацевтичної системи. Основна мета — забезпечити користувача можливістю авторизації, перегляду доступних медикаментів, здійснення покупок та перегляду історії замовлень.
     Розробка здійснювалася з використанням мови Kotlin та сучасного фреймворку Jetpack Compose для побудови інтерфейсу користувача. Архітектура програми побудована на основі шаблону MVVM (Model-View-ViewModel), що дозволяє розділити логіку представлення та бізнес-логіку, забезпечуючи масштабованість і підтримуваність проєкту.
     
1. Реалізація авторизації
На початковому етапі реалізовано форму авторизації, яка передає дані 
(email та пароль) на backend-сервер за допомогою HTTP-запиту POST. Для обміну даними використовується бібліотека Retrofit2 з конвертером Gson. Отриманий токен доступу зберігається у стані StateFlow, який спостерігається з екрану.
Було створено:
- authRepository — обробка авторизаційного запиту;
- authViewModel — керування станом авторизації;
- loginScreen — інтерфейс для введення email і пароля.

2. Виведення медикаментів після входу
Після успішного входу користувача перенаправляє на головний екран з 
переліком доступних медикаментів, отриманих з API за адресою GET /inventory/medications/. Отримані дані включають ID медикаменту, аптеку, кількість, дату виробництва, цінову інформацію, а також умови зберігання (температурний і вологісний діапазон).
Реалізовано:
- medicationItem — модель даних;
- medicationApi — API-інтерфейс;
- medicationRepository — отримання списку медикаментів;
- medicationViewModel — керування станом медикаментів;
- mainScreen + lazyColumn — виведення списку карток медикаментів.

3. Купівля медикаментів
     Кожен медикамент у списку має кнопку “Купити”, натискаючи яку, користувач надсилає дані про покупку на сервер у форматі POST /user/purchase/. Запит містить електронну пошту користувача, ID медикаменту, аптеку, кількість одиниць та прапор використання бонусів.
     Дані моделі PurchaseRequest надсилаються через UserRepository, який використовує UserApi з Retrofit. У випадку успішної покупки на екрані з’являється повідомлення про успішне замовлення.

4. Перегляд історії покупок
     Реалізовано екран “Історія покупок”, який запитує список транзакцій користувача (GET /user/purchases/). Кожен запис містить інформацію про дату, назву медикаменту, кількість, загальну вартість. Для зручності реалізовано нижнє навігаційне меню між вкладками:
- медикаменти;
- мої покупки.
Це реалізовано через BottomNavigation компонент у Jetpack Compose

5. Архітектура та інші особливості
Для користувачів з адміністративними правами реалізовано наступні 
функції:
- jetpack Compose дозволив швидко створювати декларативний UI з мінімальною кількістю XML-розмітки;
- для реактивного оновлення UI використано StateFlow та collectAsState;
- дані з backend приходять у форматі JSON, який автоматично парситься у Kotlin-класи за допомогою Gson;
- обмін даними відбувається з використанням локального Flask-серверу (localhost:5000) через Android-емулятор (адреса 10.0.2.2).

4. ВИСНОВКИ
     У результаті виконаної роботи було створено повнофункціональний Android-додаток, який реалізує типові задачі фармацевтичного сервісу: авторизацію користувача, перегляд медикаментів, здійснення покупок та перегляд історії. Проєкт відповідає вимогам, є розширюваним і може бути адаптований до реального фармацевтичного середовища.
     




ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/A29g9xHqi2U

Хронологічний опис відеозапису:

0:00 - Вступ 
0:25 - Тестування реєстрації 
0:55 - Тестування авторизації 
0:58 - Тестування дій з медикаментами 
1:11 - Головний екран мобільного додатку 
1:42 - Профіль користувача 
1:53 - Тестування покупки препаратів 
2:02 - Перегляд історії покупок 

ДОДАТОК Б
Графічні матеріали


Рисунок Б.1 – UML діаграма прецедентів


Рисунок Б.2 – UML діаграма компонент


 

Рисунок Б.3 – ER-модель даних (Entity–Relationship Model) мобільної платформи


Рисунок Б.4 – UML діаграму взаємодії

ДОДАТОК В
Авторизація користувача через ViewModel
01. class AuthViewModel(private val repository: AuthRepository) : ViewModel() {
02.
03.     private val _token = MutableStateFlow<String?>(null)
04.     val token: StateFlow<String?> = _token
05.
06.     private val _error = MutableStateFlow<String?>(null)
07.     val error: StateFlow<String?> = _error
08.
09.     fun login(email: String, password: String) {
10.         viewModelScope.launch {
11.             try {
12.                 val response = repository.login(email, password)
13.                 _token.value = response.token
14.                 _error.value = null
15.             } catch (e: Exception) {
16.                 _error.value = "Login failed: ${e.message}"
17.             }
18.         }
19.     }
20. }

ДОДАТОК Г
Виконання покупки медикаменту
01. fun purchaseMedication(
02.     email: String,
03.     medicationId: String,
04.     pharmacyId: String,
05.     quantity: Int,
06.     useBonusPoints: Boolean
07. ) {
08.     viewModelScope.launch {
09.         try {
10.             val response = userRepository.purchaseMedication(
11.                 email, medicationId, pharmacyId, quantity, useBonusPoints
12.             )
13.             _purchaseResult.value = "Success: $response"
14.         } catch (e: Exception) {
15.             _purchaseResult.value = "Purchase failed: ${e.message}"
16.         }
17.     }
18. }

